#include <stdio.h>
#include <stdlib.h>

typedef struct No {
    int dado;
    struct No *proximo;
} No;

void inserir_inicio(No **lista, int dado) {
    No *novoNo = (No *)malloc(sizeof(No));
    if (novoNo == NULL) {
        perror("Erro ao alocar memória para o novo nó");
        exit(EXIT_FAILURE);
    }
    novoNo->dado = dado;
    novoNo->proximo = *lista;
    *lista = novoNo;
}

void inserir_fim(No **lista, int dado) {
    No *novoNo = (No *)malloc(sizeof(No));
    if (novoNo == NULL) {
        perror("Erro ao alocar memória para o novo nó");
        exit(EXIT_FAILURE);
    }
    novoNo->dado = dado;
    novoNo->proximo = NULL;

    if (*lista == NULL) {
        *lista = novoNo;
    } else {
        No *atual = *lista;
        while (atual->proximo != NULL) {
            atual = atual->proximo;
        }
        atual->proximo = novoNo;
    }
}

void imprimir_lista(No *lista) {
    No *atual = lista;
    printf("Lista: ");
    while (atual != NULL) {
        printf("%d -> ", atual->dado);
        atual = atual->proximo;
    }
    printf("NULL\n");
}

void liberar_lista(No **lista) {
    No *atual = *lista;
    No *proximo;
    while (atual != NULL) {
        proximo = atual->proximo;
        free(atual);
        atual = proximo;
    }
    *lista = NULL; // Garante que a lista aponte para NULL após a liberação
}

int main() {  
    char str[] = "({[]})";  
    printf("%d\n", verificar_balanceamento(str)); // Deve imprimir 1  
    return 0;  
}
{
    No *lista = NULL;


    inserir_fim(&lista, 10);
    imprimir_lista(lista); // Saída esperada: Lista: 10 -> NULL


    inserir_inicio(&lista, 5);
    imprimir_lista(lista); // Saída esperada: Lista: 5 -> 10 -> NULL

   
    inserir_fim(&lista, 20);
    inserir_inicio(&lista, 2);
    inserir_fim(&lista, 30);
    imprimir_lista(lista); // Saída esperada: Lista: 2 -> 5 -> 10 -> 20 -> 30 -> NULL

    liberar_lista(&lista);
    printf("Lista após liberar memória: ");
    imprimir_lista(lista); // Saída esperada: Lista: NULL (ou pode ser algo diferente dependendo do compilador, mas lista deve ser NULL)

    return 0;
}
